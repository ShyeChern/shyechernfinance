[{"C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\index.js":"1","C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\reportWebVitals.js":"2","C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\App.js":"3","C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\util\\constant.js":"4","C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\util\\scrollToTop.js":"5","C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\views\\LoginPage\\Login.js":"6","C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\views\\FinancePage\\Finance.js":"7","C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\views\\Reuse\\PageNotFound.js":"8","C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\views\\Component\\Header.js":"9","C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\views\\Component\\Footer.js":"10","C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\views\\MarketPage\\Market.js":"11"},{"size":478,"mtime":1607736927961,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":3143,"mtime":1608727860466,"results":"15","hashOfConfig":"13"},{"size":273,"mtime":1608649602464,"results":"16","hashOfConfig":"13"},{"size":404,"mtime":1607736790367,"results":"17","hashOfConfig":"13"},{"size":5087,"mtime":1608726941797,"results":"18","hashOfConfig":"13"},{"size":9643,"mtime":1608640224787,"results":"19","hashOfConfig":"13"},{"size":845,"mtime":1607737949277,"results":"20","hashOfConfig":"13"},{"size":2223,"mtime":1608729248531,"results":"21","hashOfConfig":"13"},{"size":482,"mtime":1608209047287,"results":"22","hashOfConfig":"13"},{"size":9642,"mtime":1608640219490,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"bv84ge",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},"C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\index.js",[],["50","51"],"C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\reportWebVitals.js",[],"C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\App.js",["52"],"import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport ScrollToTop from \"util/scrollToTop\";\n\nimport PageNotFoundPage from \"views/Reuse/PageNotFound.js\";\nimport Login from \"views/LoginPage/Login.js\";\nimport Finance from \"views/FinancePage/Finance.js\";\nimport Market from \"views/MarketPage/Market.js\";\n\nimport { baseUrl, secret } from \"util/constant.js\";\n\nexport default function App() {\n\n  const [isLogin, setIsLogin] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [role, setRole] = useState('');\n\n  useEffect(() => {\n    const checkLogin = async () => {\n      const loginResult = await fetch(baseUrl + 'user/checkLogin', {\n        method: 'get',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          authorization: 'Basic ' + secret,\n          timestamp: new Date().getTime(),\n        },\n        credentials: 'include',\n      }).then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          return Promise.reject(res.status + \" \" + res.statusText);\n        }\n      })\n        .then((resBody) => {\n          setRole(resBody.data.role);\n          return resBody.result;\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n\n      setIsLogin(loginResult);\n      setIsLoading(false);\n    };\n\n    if (process.env.REACT_APP_ENVIRONMENT === 'Live') {\n      checkLogin();\n    } else if (process.env.REACT_APP_ENVIRONMENT === 'Local') {\n      setRole('User');\n      setIsLogin(true);\n      setIsLoading(false);\n    }\n\n    return () => {\n    }\n  }, [])\n\n  const PrivateRoute = ({ children, roleAccess, ...rest }) => {\n\n    return (\n      <Route {...rest} render={() => {\n        return isLogin ? (children) : isLoading ? (<div style={{ textAlign: 'center' }}>Checking Session...</div>) : (<Redirect to={{ pathname: \"/\" }} />);\n      }} />\n    )\n    // if (roleAccess.includes(role)) {\n    //   return (\n    //     <Route {...rest} render={() => {\n    //       // hide loading just let it\n    //       return isLogin ? (children) : isLoading ? (<div style={{ textAlign: 'center' }}>Checking Session...</div>) : (<Redirect to={{ pathname: \"/\" }} />);\n    //     }} />\n    //   )\n    // } else {\n    //   document.cookie = \"shyechern=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n    //   window.location.href = '/';\n    //   return (<Route {...rest} render={() => (<Redirect to={{ pathname: \"/\" }} />)} />)\n    // }\n  }\n\n  return (\n    <div>\n      <Router >\n        <ScrollToTop />\n        <Switch>\n          <Route exact path=\"/pagenotfound\" component={PageNotFoundPage} />\n          <Route exact path=\"/\" component={Login} />\n          <PrivateRoute exact roleAccess={['Admin', 'User']} path=\"/finance\"><Finance /> </PrivateRoute>\n          <PrivateRoute exact roleAccess={['Admin']} path=\"/market\"><Market /> </PrivateRoute>\n\n          {/* capture invalid route */}\n          <Route render={() => <Redirect to={{ pathname: \"/pagenotfound\" }} />} />\n        </Switch>\n\n      </Router>\n    </div >\n  )\n\n\n}\n\n","C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\util\\constant.js",[],"C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\util\\scrollToTop.js",[],"C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\views\\LoginPage\\Login.js",[],"C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\views\\FinancePage\\Finance.js",["53"],"import React, { useEffect, useState } from \"react\";\r\nimport { Table, Spinner, Alert, Button, Form, Container, Row, Col, Modal } from 'react-bootstrap';\r\nimport { FaTimes } from \"react-icons/fa\";\r\nimport { baseUrl, secret } from \"util/constant.js\";\r\nimport Header from 'views/Component/Header';\r\nimport Footer from 'views/Component/Footer';\r\nimport { parseISO, format } from \"date-fns\";\r\n\r\nexport default function Finance(props) {\r\n\r\n  const [role, setRole] = useState('loading...');\r\n  const [symbol, setSymbol] = useState('');\r\n  const [riskFreeRate, setRiskFreeRate] = useState('loading...');\r\n  const [marketReturnRate, setMarketReturnRate] = useState('loading...');\r\n  const [marketLastUpdate, setMarketLastUpdate] = useState('loading...');\r\n  const [username, setUsername] = useState('loading...');\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n  const [deleteStockData, setDeleteStockData] = useState({});\r\n  const [instruction, setInstruction] = useState(\"\");\r\n  const [stock, setStock] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getMarket();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getUser();\r\n  }, []);\r\n\r\n  const getMarket = () => {\r\n    fetch(baseUrl + `market/getMarket/${localStorage.getItem('scUserId')}`, {\r\n      method: 'get',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        authorization: 'Basic ' + secret,\r\n        timestamp: new Date().getTime(),\r\n      },\r\n      credentials: 'include',\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      } else {\r\n        return Promise.reject(res.json());\r\n      }\r\n    })\r\n      .then((resBody) => {\r\n        if (resBody) {\r\n          setMarketReturnRate(resBody.data.marketReturn.$numberDecimal);\r\n          setRiskFreeRate(resBody.data.riskFree.$numberDecimal);\r\n          setMarketLastUpdate(format(parseISO(resBody.data.updatedAt), 'dd MMM yyyy'));\r\n        } else {\r\n          setMarketReturnRate(resBody.message);\r\n          setRiskFreeRate(resBody.message);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setMarketReturnRate(error.message);\r\n        setRiskFreeRate(error.message);\r\n      });\r\n  }\r\n\r\n  const getUser = () => {\r\n    fetch(baseUrl + `user/getUser/${localStorage.getItem('scUserId')}`, {\r\n      method: 'get',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        authorization: 'Basic ' + secret,\r\n        timestamp: new Date().getTime(),\r\n      },\r\n      credentials: 'include',\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      } else {\r\n        return Promise.reject(res.json());\r\n      }\r\n    })\r\n      .then((resBody) => {\r\n        if (resBody) {\r\n          let stockData = [];\r\n          setUsername(resBody.data.username);\r\n          setRole(resBody.data.role);\r\n          resBody.data.stock.forEach(value => {\r\n            stockData.push(value);\r\n          });\r\n          setStock(stockData);\r\n        } else {\r\n          setMarketReturnRate(resBody.message);\r\n          setRiskFreeRate(resBody.message);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setMarketReturnRate(error.message);\r\n        setRiskFreeRate(error.message);\r\n      });\r\n  }\r\n\r\n  const addStock = () => {\r\n    let inputSymbol = symbol;\r\n    setSymbol('');\r\n    if (inputSymbol === '') {\r\n      setInstruction('Please input symbol');\r\n    } else {\r\n      setInstruction('Loading...');\r\n      fetch(baseUrl + `stock/getStock/${localStorage.getItem('scUserId')}`, {\r\n        method: 'put',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n          authorization: 'Basic ' + secret,\r\n          timestamp: new Date().getTime(),\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify({\r\n          symbol: inputSymbol\r\n        }),\r\n      }).then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        } else {\r\n          return Promise.reject(res.json());\r\n        }\r\n      })\r\n        .then((resBody) => {\r\n          if (resBody.result) {\r\n            setInstruction(resBody.message);\r\n            let stockData = [];\r\n            resBody.data.stock.forEach(value => {\r\n              stockData.push(value);\r\n            });\r\n            setStock(stockData);\r\n          } else {\r\n            setInstruction(resBody.message);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.message) {\r\n            setInstruction(error.message);\r\n          } else {\r\n            error.then(err => setInstruction(err.message));\r\n          };\r\n        });\r\n    }\r\n  }\r\n\r\n  const deleteStock = () => {\r\n    setShowDeleteModal(false);\r\n    setInstruction('Deleting Stock...');\r\n    fetch(baseUrl + `stock/deleteStock/${localStorage.getItem('scUserId')}`, {\r\n      method: 'put',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        authorization: 'Basic ' + secret,\r\n        timestamp: new Date().getTime(),\r\n      },\r\n      credentials: 'include',\r\n      body: JSON.stringify({\r\n        stockId: deleteStockData.id\r\n      }),\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      } else {\r\n        return Promise.reject(res.json());\r\n      }\r\n    })\r\n      .then((resBody) => {\r\n        if (resBody.result) {\r\n          setInstruction(resBody.message);\r\n          let stockData = [];\r\n          resBody.data.stock.forEach(value => {\r\n            stockData.push(value);\r\n          });\r\n          setStock(stockData);\r\n        } else {\r\n          setInstruction(resBody.message);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (error.message) {\r\n          setInstruction(error.message);\r\n        } else {\r\n          error.then(err => setInstruction(err.message));\r\n        };\r\n      });\r\n  }\r\n\r\n  const deleteConfirmationModal = () => {\r\n    return (\r\n      <Modal size=\"lg\" centered show={showDeleteModal}>\r\n        <Modal.Header closeButton onClick={() => setShowDeleteModal(false)}>\r\n          <Modal.Title>\r\n            Delete Confirmation\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p>Confirm delete <b>{deleteStockData.name}</b> in your list?</p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant={'secondary'} onClick={() => setShowDeleteModal(false)}>Close</Button>\r\n          <Button onClick={() => deleteStock()}>Confirm</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={style.container}>\r\n      <Header role={role} />\r\n      <Container >\r\n        <Row>\r\n          <b>Hi, {role} {username}</b>\r\n        </Row>\r\n        <Row className=\"justify-content-center pt-2\">\r\n          <Col md={6} className=\"text-right\"><p><b>Current Market Return Rate:</b> {marketReturnRate}</p></Col>\r\n          <Col md={6} className=\"text-left\"><p><b>Current Risk Free Rate:</b> {riskFreeRate}</p></Col>\r\n        </Row>\r\n        <Row className=\"justify-content-center\">\r\n          <p><b>Last Update: </b>{marketLastUpdate}</p>\r\n        </Row>\r\n        <Row className=\"justify-content-center\">\r\n          <Alert variant=\"warning\" transition={false} dismissible={true} show={instruction !== ''} onClose={() => setInstruction('')}>{instruction}</Alert>\r\n        </Row>\r\n        <Row >\r\n          <Form onSubmit={(e) => { e.preventDefault(); addStock(); }} >\r\n            <Form.Group controlId=\"symbol\">\r\n              <Form.Row>\r\n                <Form.Label column={true} md={5} style={{ alignSelf: 'center' }}>Add New Stock into List: </Form.Label>\r\n                <Col >\r\n                  <Form.Control type=\"text\" placeholder=\"Symbol\" value={symbol} onChange={(e) => setSymbol(e.target.value)} />\r\n                </Col>\r\n                <Col >\r\n                  <Button color=\"danger\" type=\"submit\" disabled={symbol === ''}>Add</Button>\r\n                </Col>\r\n              </Form.Row>\r\n            </Form.Group>\r\n          </Form>\r\n        </Row>\r\n        <Row >\r\n          <Table striped bordered hover size=\"sm\" responsive={true} style={{ textAlign: 'center' }}>\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>Ticker Symbol</th>\r\n                <th>Name</th>\r\n                <th>Beta</th>\r\n                <th>Last Updated Date</th>\r\n                <th>Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                stock.length === 0 ?\r\n                  <tr><td colSpan={6} >Currently there is no stock data in your list</td></tr>\r\n                  :\r\n                  stock.map((value, index) => {\r\n                    return (\r\n                      <tr key={index}>\r\n                        <td>{index + 1}</td>\r\n                        <td>{value.symbol}</td>\r\n                        <td>{value.name}</td>\r\n                        <td>{value.beta.$numberDecimal}</td>\r\n                        <td>{format(parseISO(value.updatedAt), 'dd MMM yyyy')}</td>\r\n                        <td><Button size={'sm'} variant={'danger'} onClick={() => { setShowDeleteModal(true); setDeleteStockData(value) }}><FaTimes title={'Delete Stock'} /></Button></td>\r\n                      </tr>\r\n                    )\r\n                  })\r\n              }\r\n              {deleteConfirmationModal()}\r\n            </tbody>\r\n          </Table>\r\n        </Row>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst style = {\r\n  container: {\r\n    backgroundColor: '#fcf6f5',\r\n    minHeight: '100vh',\r\n    position: 'relative'\r\n  },\r\n  title: {\r\n    backgroundColor: '#87ceeb',\r\n  },\r\n}\r\n","C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\views\\Reuse\\PageNotFound.js",[],"C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\views\\Component\\Header.js",[],"C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\views\\Component\\Footer.js",[],"C:\\Users\\chern\\Documents\\GitHub\\shyechernfinance\\src\\views\\MarketPage\\Market.js",["54"],"import React, { useEffect, useState } from \"react\";\r\nimport { Table, Spinner, Alert, Button, Form, Container, Row, Col, Modal } from 'react-bootstrap';\r\nimport { FaTimes } from \"react-icons/fa\";\r\nimport { baseUrl, secret } from \"util/constant.js\";\r\nimport Header from 'views/Component/Header';\r\nimport Footer from 'views/Component/Footer';\r\nimport { parseISO, format } from \"date-fns\";\r\n\r\nexport default function Market(props) {\r\n\r\n  const [role, setRole] = useState('loading...');\r\n  const [symbol, setSymbol] = useState('');\r\n  const [riskFreeRate, setRiskFreeRate] = useState('loading...');\r\n  const [marketReturnRate, setMarketReturnRate] = useState('loading...');\r\n  const [marketLastUpdate, setMarketLastUpdate] = useState('loading...');\r\n  const [username, setUsername] = useState('loading...');\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n  const [deleteStockData, setDeleteStockData] = useState({});\r\n  const [instruction, setInstruction] = useState(\"\");\r\n  const [stock, setStock] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getMarket();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getUser();\r\n  }, []);\r\n\r\n  const getMarket = () => {\r\n    fetch(baseUrl + `market/getMarket/${localStorage.getItem('scUserId')}`, {\r\n      method: 'get',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        authorization: 'Basic ' + secret,\r\n        timestamp: new Date().getTime(),\r\n      },\r\n      credentials: 'include',\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      } else {\r\n        return Promise.reject(res.json());\r\n      }\r\n    })\r\n      .then((resBody) => {\r\n        if (resBody) {\r\n          setMarketReturnRate(resBody.data.marketReturn.$numberDecimal);\r\n          setRiskFreeRate(resBody.data.riskFree.$numberDecimal);\r\n          setMarketLastUpdate(format(parseISO(resBody.data.updatedAt), 'dd MMM yyyy'));\r\n        } else {\r\n          setMarketReturnRate(resBody.message);\r\n          setRiskFreeRate(resBody.message);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setMarketReturnRate(error.message);\r\n        setRiskFreeRate(error.message);\r\n      });\r\n  }\r\n\r\n  const getUser = () => {\r\n    fetch(baseUrl + `user/getUser/${localStorage.getItem('scUserId')}`, {\r\n      method: 'get',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        authorization: 'Basic ' + secret,\r\n        timestamp: new Date().getTime(),\r\n      },\r\n      credentials: 'include',\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      } else {\r\n        return Promise.reject(res.json());\r\n      }\r\n    })\r\n      .then((resBody) => {\r\n        if (resBody) {\r\n          let stockData = [];\r\n          setUsername(resBody.data.username);\r\n          setRole(resBody.data.role);\r\n          resBody.data.stock.forEach(value => {\r\n            stockData.push(value);\r\n          });\r\n          setStock(stockData);\r\n        } else {\r\n          setMarketReturnRate(resBody.message);\r\n          setRiskFreeRate(resBody.message);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setMarketReturnRate(error.message);\r\n        setRiskFreeRate(error.message);\r\n      });\r\n  }\r\n\r\n  const addStock = () => {\r\n    let inputSymbol = symbol;\r\n    setSymbol('');\r\n    if (inputSymbol === '') {\r\n      setInstruction('Please input symbol');\r\n    } else {\r\n      setInstruction('Loading...');\r\n      fetch(baseUrl + `stock/getStock/${localStorage.getItem('scUserId')}`, {\r\n        method: 'put',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n          authorization: 'Basic ' + secret,\r\n          timestamp: new Date().getTime(),\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify({\r\n          symbol: inputSymbol\r\n        }),\r\n      }).then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        } else {\r\n          return Promise.reject(res.json());\r\n        }\r\n      })\r\n        .then((resBody) => {\r\n          if (resBody.result) {\r\n            setInstruction(resBody.message);\r\n            let stockData = [];\r\n            resBody.data.stock.forEach(value => {\r\n              stockData.push(value);\r\n            });\r\n            setStock(stockData);\r\n          } else {\r\n            setInstruction(resBody.message);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.message) {\r\n            setInstruction(error.message);\r\n          } else {\r\n            error.then(err => setInstruction(err.message));\r\n          };\r\n        });\r\n    }\r\n  }\r\n\r\n  const deleteStock = () => {\r\n    setShowDeleteModal(false);\r\n    setInstruction('Deleting Stock...');\r\n    fetch(baseUrl + `stock/deleteStock/${localStorage.getItem('scUserId')}`, {\r\n      method: 'put',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        authorization: 'Basic ' + secret,\r\n        timestamp: new Date().getTime(),\r\n      },\r\n      credentials: 'include',\r\n      body: JSON.stringify({\r\n        stockId: deleteStockData.id\r\n      }),\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      } else {\r\n        return Promise.reject(res.json());\r\n      }\r\n    })\r\n      .then((resBody) => {\r\n        if (resBody.result) {\r\n          setInstruction(resBody.message);\r\n          let stockData = [];\r\n          resBody.data.stock.forEach(value => {\r\n            stockData.push(value);\r\n          });\r\n          setStock(stockData);\r\n        } else {\r\n          setInstruction(resBody.message);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (error.message) {\r\n          setInstruction(error.message);\r\n        } else {\r\n          error.then(err => setInstruction(err.message));\r\n        };\r\n      });\r\n  }\r\n\r\n  const deleteConfirmationModal = () => {\r\n    return (\r\n      <Modal size=\"lg\" centered show={showDeleteModal}>\r\n        <Modal.Header closeButton onClick={() => setShowDeleteModal(false)}>\r\n          <Modal.Title>\r\n            Delete Confirmation\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p>Confirm delete <b>{deleteStockData.name}</b> in your list?</p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant={'secondary'} onClick={() => setShowDeleteModal(false)}>Close</Button>\r\n          <Button onClick={() => deleteStock()}>Confirm</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={style.container}>\r\n      <Header role={role} />\r\n      <Container >\r\n        <Row>\r\n          <b>Hi, {role} {username}</b>\r\n        </Row>\r\n        <Row className=\"justify-content-center pt-2\">\r\n          <Col md={6} className=\"text-right\"><p><b>Current Market Return Rate:</b> {marketReturnRate}</p></Col>\r\n          <Col md={6} className=\"text-left\"><p><b>Current Risk Free Rate:</b> {riskFreeRate}</p></Col>\r\n        </Row>\r\n        <Row className=\"justify-content-center\">\r\n          <p><b>Last Update: </b>{marketLastUpdate}</p>\r\n        </Row>\r\n        <Row className=\"justify-content-center\">\r\n          <Alert variant=\"warning\" transition={false} dismissible={true} show={instruction !== ''} onClose={() => setInstruction('')}>{instruction}</Alert>\r\n        </Row>\r\n        <Row >\r\n          <Form onSubmit={(e) => { e.preventDefault(); addStock(); }} >\r\n            <Form.Group controlId=\"symbol\">\r\n              <Form.Row>\r\n                <Form.Label column={true} md={5} style={{ alignSelf: 'center' }}>Add New Stock into List: </Form.Label>\r\n                <Col >\r\n                  <Form.Control type=\"text\" placeholder=\"Symbol\" value={symbol} onChange={(e) => setSymbol(e.target.value)} />\r\n                </Col>\r\n                <Col >\r\n                  <Button color=\"danger\" type=\"submit\" disabled={symbol === ''}>Add</Button>\r\n                </Col>\r\n              </Form.Row>\r\n            </Form.Group>\r\n          </Form>\r\n        </Row>\r\n        <Row >\r\n          <Table striped bordered hover size=\"sm\" responsive={true} style={{ textAlign: 'center' }}>\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>Ticker Symbol</th>\r\n                <th>Name</th>\r\n                <th>Beta</th>\r\n                <th>Last Updated Date</th>\r\n                <th>Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                stock.length === 0 ?\r\n                  <tr><td colSpan={6} >Currently there is no stock data in your list</td></tr>\r\n                  :\r\n                  stock.map((value, index) => {\r\n                    return (\r\n                      <tr key={index}>\r\n                        <td>{index + 1}</td>\r\n                        <td>{value.symbol}</td>\r\n                        <td>{value.name}</td>\r\n                        <td>{value.beta.$numberDecimal}</td>\r\n                        <td>{format(parseISO(value.updatedAt), 'dd MMM yyyy')}</td>\r\n                        <td><Button size={'sm'} variant={'danger'} onClick={() => { setShowDeleteModal(true); setDeleteStockData(value) }}><FaTimes title={'Delete Stock'} /></Button></td>\r\n                      </tr>\r\n                    )\r\n                  })\r\n              }\r\n              {deleteConfirmationModal()}\r\n            </tbody>\r\n          </Table>\r\n        </Row>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst style = {\r\n  container: {\r\n    backgroundColor: '#fcf6f5',\r\n    minHeight: '100vh',\r\n    position: 'relative'\r\n  },\r\n  title: {\r\n    backgroundColor: '#87ceeb',\r\n  },\r\n}\r\n",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":16,"column":10,"nodeType":"61","messageId":"62","endLine":16,"endColumn":14},{"ruleId":"59","severity":1,"message":"63","line":2,"column":17,"nodeType":"61","messageId":"62","endLine":2,"endColumn":24},{"ruleId":"59","severity":1,"message":"63","line":2,"column":17,"nodeType":"61","messageId":"62","endLine":2,"endColumn":24},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'role' is assigned a value but never used.","Identifier","unusedVar","'Spinner' is defined but never used.","no-global-assign","no-unsafe-negation"]